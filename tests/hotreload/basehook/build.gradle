/*
Copyright 2024 Jeff Dileo

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

apply plugin: 'java'

buildscript {
  repositories {
    mavenLocal()
    //jcenter()
    gradlePluginPortal()
  }

  dependencies {
    classpath group: 'trust.nccgroup', name: 'caldum-embeddedagentplugin', version: '1.0.0'
    classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '5.2.0'
  }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'caldum-vl-embed'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
  mavenLocal()
  mavenCentral()
}

String bbver = new File(projectDir.getAbsolutePath() + "/../../../caldum/bbver.txt").getText('UTF-8').strip()

dependencies {
  compile fileTree(include: ['*.jar'], dir: 'lib')

  compileOnly group: 'trust.nccgroup', name: 'caldum', version: '1.0.0'
  compileOnly group: 'net.bytebuddy', name: 'byte-buddy', version: bbver

  testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['./src', './gensrc']
    }

    resources {
      srcDirs = ['./res']
    }
  }

  test {
    java {
      srcDirs = ['./test/src']
    }
    resources {
      srcDirs = ['./test/res']
    }
  }
}

/*
jar {
  manifest {
    attributes (
            "Manifest-Version": "1.0",
            "Premain-Class": "trust.nccgroup.caldumtest.AgentEntry",
            "Agent-Class": "trust.nccgroup.caldumtest.AgentEntry"
    )
  }
}
*/

task codegen() {
  println "Generating sources...."
  def gensrcdir = project.sourceSets.main.java.srcDirs[1]
  def target_path = "" + gensrcdir + "/trust/nccgroup/caldumtest/generated/TemplatedFileHook.java"
  def templatedir = "" + gensrcdir + "/../templatesrc/trust/nccgroup/caldumtest/generated/"
  
  if (!project.hasProperty('hookversion')) {
    throw new Exception("-Phookversion=<version> not set");
  }

  def template_path = templatedir + "TemplatedFileHook." + hookversion + ".java"
  def template = new File(template_path).text
  def target = new File(target_path)
  target.delete()
  target << template
}

tasks.withType(JavaCompile) {
  compileTask -> compileTask.dependsOn codegen
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task testJar(type: ShadowJar) {
 classifier = 'tests'
 from sourceSets.test.output
 configurations = [project.configurations.testRuntime]
}

defaultTasks "shadowJar"
             //, "caldum-vl-embed", "testJar"
// java -cp build/libs/java67-tests.jar org.junit.runner.JUnitCore trust.nccgroup.caldumtest.test.RunAllTests
